// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib/config/optionsconfiguration.proto

package config

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/syncthing/syncthing/proto/ext"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OptionsConfiguration struct {
	RawListenAddresses          []string `protobuf:"bytes,1,rep,name=listen_addresses,json=listenAddresses,proto3" json:"listenAddresses" xml:"listenAddress" default:"default"`
	RawGlobalAnnServers         []string `protobuf:"bytes,2,rep,name=global_discovery_servers,json=globalDiscoveryServers,proto3" json:"globalAnnounceServers" xml:"globalAnnounceServer" default:"default"`
	GlobalAnnEnabled            bool     `protobuf:"varint,3,opt,name=global_discovery_enabled,json=globalDiscoveryEnabled,proto3" json:"globalAnnounceEnabled" xml:"globalAnnounceEnabled" default:"true"`
	LocalAnnEnabled             bool     `protobuf:"varint,4,opt,name=local_discovery_enabled,json=localDiscoveryEnabled,proto3" json:"localAnnounceEnabled" xml:"localAnnounceEnabled" default:"true"`
	LocalAnnPort                int      `protobuf:"varint,5,opt,name=local_announce_port,json=localAnnouncePort,proto3,casttype=int" json:"localAnnouncePort" xml:"localAnnouncePort" default:"21027"`
	LocalAnnMCAddr              string   `protobuf:"bytes,6,opt,name=local_announce_multicast_address,json=localAnnounceMulticastAddress,proto3" json:"localAnnounceMCAddr" xml:"localAnnounceMCAddr" default:"[ff12::8384]:21027"`
	MaxSendKbps                 int      `protobuf:"varint,7,opt,name=max_send_kbps,json=maxSendKbps,proto3,casttype=int" json:"maxSendKbps" xml:"maxSendKbps"`
	MaxRecvKbps                 int      `protobuf:"varint,8,opt,name=max_recv_kbps,json=maxRecvKbps,proto3,casttype=int" json:"maxRecvKbps" xml:"maxRecvKbps"`
	ReconnectIntervalS          int      `protobuf:"varint,9,opt,name=reconnection_interval_s,json=reconnectionIntervalS,proto3,casttype=int" json:"reconnectionIntervalS" xml:"reconnectionIntervalS" default:"60"`
	RelaysEnabled               bool     `protobuf:"varint,10,opt,name=relays_enabled,json=relaysEnabled,proto3" json:"relaysEnabled" xml:"relaysEnabled" default:"true"`
	RelayReconnectIntervalM     int      `protobuf:"varint,11,opt,name=relays_reconnect_interval_m,json=relaysReconnectIntervalM,proto3,casttype=int" json:"relayReconnectIntervalM" xml:"relayReconnectIntervalM" default:"10"`
	StartBrowser                bool     `protobuf:"varint,12,opt,name=start_browser,json=startBrowser,proto3" json:"startBrowser" xml:"startBrowser" default:"true"`
	NATEnabled                  bool     `protobuf:"varint,14,opt,name=nat_traversal_enabled,json=natTraversalEnabled,proto3" json:"natEnabled" xml:"natEnabled" default:"true"`
	NATLeaseM                   int      `protobuf:"varint,15,opt,name=nat_traversal_lease_m,json=natTraversalLeaseM,proto3,casttype=int" json:"natLeaseMinutes" xml:"natLeaseMinutes" default:"60"`
	NATRenewalM                 int      `protobuf:"varint,16,opt,name=nat_traversal_renewal_m,json=natTraversalRenewalM,proto3,casttype=int" json:"natRenewalMinutes" xml:"natRenewalMinutes" default:"30"`
	NATTimeoutS                 int      `protobuf:"varint,17,opt,name=nat_traversal_timeout_s,json=natTraversalTimeoutS,proto3,casttype=int" json:"natTimeoutSeconds" xml:"natTimeoutSeconds" default:"10"`
	URAccepted                  int      `protobuf:"varint,18,opt,name=usage_reporting_accepted,json=usageReportingAccepted,proto3,casttype=int" json:"urAccepted" xml:"urAccepted"`
	URSeen                      int      `protobuf:"varint,19,opt,name=usage_reporting_seen,json=usageReportingSeen,proto3,casttype=int" json:"urSeen" xml:"urSeen"`
	URUniqueID                  string   `protobuf:"bytes,20,opt,name=usage_reporting_unique_id,json=usageReportingUniqueId,proto3" json:"urUniqueId" xml:"urUniqueID"`
	URURL                       string   `protobuf:"bytes,21,opt,name=usage_reporting_url,json=usageReportingUrl,proto3" json:"urURL" xml:"urURL" default:"https://data.syncthing.net/newdata"`
	URPostInsecurely            bool     `protobuf:"varint,22,opt,name=usage_reporting_post_insecurely,json=usageReportingPostInsecurely,proto3" json:"urPostInsecurely" xml:"urPostInsecurely" default:"false"`
	URInitialDelayS             int      `protobuf:"varint,23,opt,name=usage_reporting_initial_delay_s,json=usageReportingInitialDelayS,proto3,casttype=int" json:"urInitialDelayS" xml:"urInitialDelayS" default:"1800"`
	RestartOnWakeup             bool     `protobuf:"varint,24,opt,name=restart_on_wakeup,json=restartOnWakeup,proto3" json:"restartOnWakeup" xml:"restartOnWakeup" default:"true"`
	AutoUpgradeIntervalH        int      `protobuf:"varint,25,opt,name=auto_upgrade_interval_h,json=autoUpgradeIntervalH,proto3,casttype=int" json:"autoUpgradeIntervalH" xml:"autoUpgradeIntervalH" default:"12"`
	UpgradeToPreReleases        bool     `protobuf:"varint,26,opt,name=upgrade_to_pre_releases,json=upgradeToPreReleases,proto3" json:"upgradeToPreReleases" xml:"upgradeToPreReleases"`
	KeepTemporariesH            int      `protobuf:"varint,27,opt,name=keep_temporaries_h,json=keepTemporariesH,proto3,casttype=int" json:"keepTemporariesH" xml:"keepTemporariesH" default:"24"`
	CacheIgnoredFiles           bool     `protobuf:"varint,28,opt,name=cache_ignored_files,json=cacheIgnoredFiles,proto3" json:"cacheIgnoredFiles" xml:"cacheIgnoredFiles" default:"false"`
	ProgressUpdateIntervalS     int      `protobuf:"varint,29,opt,name=progress_update_interval_s,json=progressUpdateIntervalS,proto3,casttype=int" json:"progressUpdateIntervalS" xml:"progressUpdateIntervalS" default:"5"`
	LimitBandwidthInLan         bool     `protobuf:"varint,30,opt,name=limit_bandwidth_in_lan,json=limitBandwidthInLan,proto3" json:"limitBandwidthInLan" xml:"limitBandwidthInLan" default:"false"`
	MinHomeDiskFree             Size     `protobuf:"bytes,31,opt,name=min_home_disk_free,json=minHomeDiskFree,proto3" json:"minHomeDiskFree" xml:"minHomeDiskFree" default:"1 %"`
	ReleasesURL                 string   `protobuf:"bytes,32,opt,name=releases_url,json=releasesUrl,proto3" json:"releasesURL" xml:"releasesURL" default:"https://upgrades.syncthing.net/meta.json"`
	AlwaysLocalNets             []string `protobuf:"bytes,33,rep,name=always_local_nets,json=alwaysLocalNets,proto3" json:"alwaysLocalNets" xml:"alwaysLocalNet"`
	OverwriteRemoteDevNames     bool     `protobuf:"varint,34,opt,name=overwrite_remote_device_names_on_connect,json=overwriteRemoteDeviceNamesOnConnect,proto3" json:"overwriteRemoteDeviceNamesOnConnect" xml:"overwriteRemoteDeviceNamesOnConnect" default:"false"`
	TempIndexMinBlocks          int      `protobuf:"varint,35,opt,name=temp_index_min_blocks,json=tempIndexMinBlocks,proto3,casttype=int" json:"tempIndexMinBlocks" xml:"tempIndexMinBlocks" default:"10"`
	UnackedNotificationIDs      []string `protobuf:"bytes,36,rep,name=unacked_notification_ids,json=unackedNotificationIds,proto3" json:"unackedNotificationIDs" xml:"unackedNotificationID"`
	TrafficClass                int      `protobuf:"varint,37,opt,name=traffic_class,json=trafficClass,proto3,casttype=int" json:"trafficClass" xml:"trafficClass"`
	DeprecatedDefaultFolderPath string   `protobuf:"bytes,38,opt,name=default_folder_path,json=defaultFolderPath,proto3" json:"-" xml:"defaultFolderPath,omitempty"` // Deprecated: Do not use.
	SetLowPriority              bool     `protobuf:"varint,39,opt,name=set_low_priority,json=setLowPriority,proto3" json:"setLowPriority" xml:"setLowPriority" default:"true"`
	RawMaxFolderConcurrency     int      `protobuf:"varint,40,opt,name=max_folder_concurrency,json=maxFolderConcurrency,proto3,casttype=int" json:"maxFolderConcurrency" xml:"maxFolderConcurrency"`
	CRURL                       string   `protobuf:"bytes,41,opt,name=crash_reporting_url,json=crashReportingUrl,proto3" json:"crURL" xml:"crashReportingURL" default:"https://crash.syncthing.net/newcrash"`
	CREnabled                   bool     `protobuf:"varint,42,opt,name=crash_reporting_enabled,json=crashReportingEnabled,proto3" json:"crashReportingEnabled" xml:"crashReportingEnabled" default:"true"`
	StunKeepaliveStartS         int      `protobuf:"varint,43,opt,name=stun_keepalive_start_s,json=stunKeepaliveStartS,proto3,casttype=int" json:"stunKeepaliveStartS" xml:"stunKeepaliveStartS" default:"180"`
	StunKeepaliveMinS           int      `protobuf:"varint,44,opt,name=stun_keepalive_min_s,json=stunKeepaliveMinS,proto3,casttype=int" json:"stunKeepaliveMinS" xml:"stunKeepaliveMinS" default:"20"`
	RawStunServers              []string `protobuf:"bytes,45,rep,name=stun_servers,json=stunServers,proto3" json:"stunServers" xml:"stunServer" default:"default"`
	DatabaseTuning              Tuning   `protobuf:"varint,46,opt,name=database_tuning,json=databaseTuning,proto3,enum=config.Tuning" json:"databaseTuning" xml:"databaseTuning" restart:"true"`
	RawMaxCIRequestKiB          int      `protobuf:"varint,47,opt,name=max_concurrent_incoming_request_kib,json=maxConcurrentIncomingRequestKib,proto3,casttype=int" json:"maxConcurrentIncomingRequestKiB" xml:"maxConcurrentIncomingRequestKiB"`
	AnnounceLANAddresses        bool     `protobuf:"varint,48,opt,name=announce_lan_addresses,json=announceLanAddresses,proto3" json:"announceLANAddresses" xml:"announceLANAddresses" default:"true"`
	SendFullIndexOnUpgrade      bool     `protobuf:"varint,49,opt,name=send_full_index_on_upgrade,json=sendFullIndexOnUpgrade,proto3" json:"sendFullIndexOnUpgrade" xml:"sendFullIndexOnUpgrade"`
	FeatureFlags                []string `protobuf:"bytes,50,rep,name=feature_flags,json=featureFlags,proto3" json:"featureFlags" xml:"featureFlag"`
	// The number of connections at which we stop trying to connect to more
	// devices, zero meaning no limit. Does not affect incoming connections.
	ConnectionLimitEnough int `protobuf:"varint,51,opt,name=connection_limit_enough,json=connectionLimitEnough,proto3,casttype=int" json:"connectionLimitEnough" xml:"connectionLimitEnough"`
	// The maximum number of connections which we will allow in total, zero
	// meaning no limit. Affects incoming connections and prevents
	// attempting outgoing connections.
	ConnectionLimitMax int `protobuf:"varint,52,opt,name=connection_limit_max,json=connectionLimitMax,proto3,casttype=int" json:"connectionLimitMax" xml:"connectionLimitMax"`
	// When set, this allows TLS 1.2 on sync connections, where we otherwise
	// default to TLS 1.3+ only.
	InsecureAllowOldTLSVersions bool `protobuf:"varint,53,opt,name=insecure_allow_old_tls_versions,json=insecureAllowOldTlsVersions,proto3" json:"insecureAllowOldTLSVersions" xml:"insecureAllowOldTLSVersions"`
	// Disable the local connection priority bump. Used for when tunneling to the remote device through a local tcp
	// tunnel (e.g. ssh port forwarding)
	LocalConnectionPriority int `protobuf:"varint,54,opt,name=local_connection_priority,json=localConnectionPriority,proto3,casttype=int" json:"localConnectionPriority" xml:"localConnectionPriority"`
	// Legacy deprecated
	DeprecatedUPnPEnabled        bool     `protobuf:"varint,9000,opt,name=upnp_enabled,json=upnpEnabled,proto3" json:"-" xml:"upnpEnabled,omitempty"`                                    // Deprecated: Do not use.
	DeprecatedUPnPLeaseM         int      `protobuf:"varint,9001,opt,name=upnp_lease_m,json=upnpLeaseM,proto3,casttype=int" json:"-" xml:"upnpLeaseMinutes,omitempty"`                   // Deprecated: Do not use.
	DeprecatedUPnPRenewalM       int      `protobuf:"varint,9002,opt,name=upnp_renewal_m,json=upnpRenewalM,proto3,casttype=int" json:"-" xml:"upnpRenewalMinutes,omitempty"`             // Deprecated: Do not use.
	DeprecatedUPnPTimeoutS       int      `protobuf:"varint,9003,opt,name=upnp_timeout_s,json=upnpTimeoutS,proto3,casttype=int" json:"-" xml:"upnpTimeoutSeconds,omitempty"`             // Deprecated: Do not use.
	DeprecatedRelayServers       []string `protobuf:"bytes,9004,rep,name=relay_servers,json=relayServers,proto3" json:"-" xml:"relayServer,omitempty"`                                   // Deprecated: Do not use.
	DeprecatedMinHomeDiskFreePct float64  `protobuf:"fixed64,9005,opt,name=min_home_disk_free_pct,json=minHomeDiskFreePct,proto3" json:"-" xml:"minHomeDiskFreePct,omitempty"`           // Deprecated: Do not use.
	DeprecatedMaxConcurrentScans int      `protobuf:"varint,9006,opt,name=max_concurrent_scans,json=maxConcurrentScans,proto3,casttype=int" json:"-" xml:"maxConcurrentScans,omitempty"` // Deprecated: Do not use.
}

func (m *OptionsConfiguration) Reset()         { *m = OptionsConfiguration{} }
func (m *OptionsConfiguration) String() string { return proto.CompactTextString(m) }
func (*OptionsConfiguration) ProtoMessage()    {}
func (*OptionsConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_d09882599506ca03, []int{0}
}
func (m *OptionsConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OptionsConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OptionsConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OptionsConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptionsConfiguration.Merge(m, src)
}
func (m *OptionsConfiguration) XXX_Size() int {
	return m.ProtoSize()
}
func (m *OptionsConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_OptionsConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_OptionsConfiguration proto.InternalMessageInfo

func init() {
	proto.RegisterType((*OptionsConfiguration)(nil), "config.OptionsConfiguration")
}

func init() {
	proto.RegisterFile("lib/config/optionsconfiguration.proto", fileDescriptor_d09882599506ca03)
}

var fileDescriptor_d09882599506ca03 = []byte{
	// 3326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x5a, 0x5d, 0x6c, 0x1d, 0x47,
	0x15, 0xce, 0x26, 0x4d, 0xda, 0x6c, 0x1c, 0x27, 0x1e, 0x3b, 0xf6, 0x36, 0x49, 0xbd, 0xee, 0xcd,
	0x4d, 0xeb, 0xfe, 0x25, 0xb6, 0x93, 0x86, 0x34, 0x12, 0x2a, 0xfe, 0xa9, 0xa9, 0x1b, 0x3b, 0xb6,
	0xc6, 0x36, 0x45, 0x45, 0x68, 0x35, 0xde, 0x3b, 0xd7, 0x5e, 0xbc, 0x77, 0xf6, 0x76, 0x67, 0xd6,
	0x3f, 0x2d, 0xa2, 0x55, 0x11, 0x94, 0x37, 0xc0, 0xe2, 0x47, 0x02, 0x09, 0x15, 0x01, 0x12, 0xa5,
	0x14, 0x21, 0x21, 0x21, 0xc1, 0x0b, 0x15, 0x12, 0x52, 0x05, 0x0f, 0xbe, 0x8f, 0x48, 0x94, 0x45,
	0x75, 0xfa, 0x74, 0x1f, 0x78, 0xb8, 0x8f, 0xe6, 0x05, 0xcd, 0xec, 0xdf, 0xec, 0xee, 0xdc, 0x24,
	0x6f, 0x77, 0xcf, 0x77, 0xe6, 0xcc, 0x77, 0xe6, 0xe7, 0xcc, 0x39, 0x33, 0x57, 0xbf, 0xec, 0x3a,
	0x6b, 0x57, 0x6d, 0x8f, 0xd4, 0x9d, 0xf5, 0xab, 0x5e, 0x93, 0x39, 0x1e, 0xa1, 0xd1, 0x57, 0xe0,
	0x23, 0xfe, 0x75, 0xa5, 0xe9, 0x7b, 0xcc, 0x03, 0x27, 0x22, 0xe1, 0xf9, 0x21, 0x49, 0x9d, 0x05,
	0xc4, 0x21, 0xeb, 0x91, 0xc2, 0xf9, 0x73, 0x12, 0x40, 0x9d, 0x37, 0x70, 0x2c, 0x3e, 0x89, 0x77,
	0x58, 0xf4, 0xb3, 0x72, 0xf7, 0xb6, 0x3e, 0xb0, 0x18, 0xf5, 0x30, 0x2d, 0xf7, 0x00, 0x7e, 0xa6,
	0xe9, 0x67, 0x5d, 0x87, 0x32, 0x4c, 0x2c, 0x54, 0xab, 0xf9, 0x98, 0x52, 0x4c, 0x0d, 0x6d, 0xe4,
	0xd8, 0xe8, 0xc9, 0x29, 0x7a, 0x10, 0x9a, 0x00, 0xa2, 0xed, 0x79, 0x01, 0x4f, 0x26, 0x68, 0x3b,
	0x34, 0xcf, 0xb8, 0x79, 0x51, 0x27, 0x34, 0x2f, 0xef, 0x34, 0xdc, 0x5b, 0x95, 0x9c, 0xbc, 0x32,
	0x52, 0xc3, 0x75, 0x14, 0xb8, 0xec, 0x56, 0x25, 0xfe, 0x51, 0x39, 0xdc, 0xaf, 0x3e, 0x1c, 0xff,
	0xde, 0x6b, 0x55, 0x15, 0xc6, 0x61, 0xd1, 0x34, 0xf8, 0xaf, 0xa6, 0x1b, 0xeb, 0xae, 0xb7, 0x86,
	0x5c, 0xab, 0xe6, 0x50, 0xdb, 0xdb, 0xc2, 0xfe, 0xae, 0x45, 0xb1, 0xbf, 0x85, 0x7d, 0x6a, 0x1c,
	0x15, 0x44, 0xff, 0xa0, 0x1d, 0x84, 0x66, 0x3f, 0x44, 0xdb, 0x5f, 0x14, 0x7a, 0x93, 0x84, 0x2c,
	0x47, 0x78, 0x3b, 0x34, 0xcf, 0xad, 0x27, 0x32, 0x2f, 0x20, 0x36, 0x8e, 0x81, 0x4e, 0x68, 0x3e,
	0x2b, 0x08, 0xab, 0x50, 0x05, 0xef, 0xf6, 0x7e, 0x75, 0x40, 0xa5, 0xda, 0xd9, 0xaf, 0xaa, 0x3b,
	0xc8, 0x3b, 0xaa, 0xe2, 0x06, 0x07, 0xa3, 0x86, 0x33, 0x89, 0x53, 0xb1, 0x1c, 0x7c, 0xa6, 0x72,
	0x18, 0x13, 0xb4, 0xe6, 0xe2, 0x9a, 0x71, 0x6c, 0x44, 0x1b, 0x7d, 0x64, 0xea, 0x7d, 0xee, 0xf0,
	0xd9, 0xd4, 0xe2, 0x4b, 0x11, 0x58, 0xf6, 0x36, 0x06, 0x3a, 0xa1, 0xf9, 0xb4, 0xc2, 0xdb, 0x18,
	0x95, 0xdc, 0x65, 0x7e, 0x80, 0xb9, 0xaf, 0x5d, 0xcc, 0x74, 0x03, 0x0e, 0xf7, 0xab, 0x0f, 0xf1,
	0xa6, 0x7b, 0xad, 0x6a, 0x89, 0x54, 0xc9, 0xcd, 0x58, 0x0e, 0x3e, 0xd1, 0xf4, 0x21, 0xd7, 0xb3,
	0x95, 0x5e, 0x3e, 0x24, 0xbc, 0xfc, 0x05, 0xf7, 0xf2, 0xcc, 0x3c, 0xd7, 0xc9, 0x39, 0x39, 0xe0,
	0xc6, 0xa2, 0x82, 0x8f, 0x4f, 0x45, 0x4b, 0x50, 0x01, 0x2a, 0x5c, 0x54, 0x1b, 0xe9, 0x22, 0x97,
	0x1c, 0x2c, 0xf2, 0x81, 0xe7, 0x44, 0x83, 0x92, 0x7b, 0xff, 0xd0, 0xf4, 0xfe, 0xc8, 0x3d, 0x14,
	0xdb, 0xb2, 0x9a, 0x9e, 0xcf, 0x8c, 0xe3, 0x23, 0xda, 0xe8, 0xf1, 0xa9, 0x9f, 0x70, 0xd7, 0x7a,
	0x12, 0x53, 0x4b, 0x9e, 0xcf, 0xda, 0xa1, 0xd9, 0x97, 0xeb, 0x9a, 0x0b, 0x3b, 0xa1, 0xf9, 0x64,
	0xd9, 0x29, 0x8e, 0x48, 0x1e, 0x4d, 0x8c, 0x8f, 0x4d, 0x7c, 0xae, 0x72, 0x18, 0x9a, 0xc7, 0x1c,
	0xc2, 0xda, 0xfb, 0x55, 0x85, 0x19, 0x95, 0xf0, 0x70, 0xbf, 0x7a, 0x5c, 0x34, 0xdd, 0x6b, 0x55,
	0x73, 0x4c, 0x60, 0x59, 0x17, 0x7c, 0xf3, 0xa8, 0x3e, 0x52, 0xf0, 0xa6, 0x11, 0xb8, 0xcc, 0xb1,
	0x11, 0x65, 0x49, 0xdc, 0x30, 0x4e, 0x8c, 0x68, 0xa3, 0x27, 0xa7, 0xfe, 0xc4, 0x5d, 0xeb, 0x4d,
	0x0c, 0x2e, 0x4c, 0xf3, 0x9d, 0xdc, 0x0e, 0xcd, 0xfe, 0x9c, 0xd1, 0x48, 0xdc, 0x09, 0xcd, 0x1b,
	0x65, 0xf7, 0x22, 0x4c, 0x72, 0xf0, 0x2b, 0xf5, 0xfa, 0xf8, 0xc4, 0xad, 0x5b, 0x37, 0xaf, 0xdd,
	0xbc, 0xfe, 0xd5, 0x5b, 0x91, 0xb7, 0xed, 0xfd, 0xaa, 0xd2, 0xa0, 0x5a, 0x7c, 0xb8, 0x5f, 0x05,
	0x65, 0x23, 0x7b, 0xad, 0x6a, 0x81, 0x26, 0x7c, 0x2c, 0xdf, 0x38, 0xf1, 0x30, 0x0e, 0x46, 0x60,
	0x51, 0x3f, 0xdd, 0x40, 0x3b, 0x16, 0xc5, 0xa4, 0x66, 0x6d, 0xae, 0x35, 0xa9, 0xf1, 0xb0, 0x98,
	0xcc, 0x67, 0xda, 0xa1, 0x79, 0xaa, 0x81, 0x76, 0x96, 0x31, 0xa9, 0xdd, 0x5e, 0x6b, 0xf2, 0xe0,
	0xd2, 0x27, 0xdc, 0x92, 0x64, 0xc9, 0xfc, 0x40, 0x59, 0x31, 0x31, 0xe8, 0x63, 0x7b, 0x2b, 0x32,
	0xf8, 0x48, 0xce, 0x20, 0xc4, 0xf6, 0x56, 0xd1, 0x60, 0x22, 0xcb, 0x19, 0x4c, 0x84, 0xe0, 0x8f,
	0x9a, 0x3e, 0xe4, 0x63, 0xdb, 0x23, 0x04, 0xdb, 0x3c, 0xbc, 0x5b, 0x0e, 0x61, 0xd8, 0xdf, 0x42,
	0xae, 0x45, 0x8d, 0x93, 0xc2, 0xf6, 0x37, 0x44, 0x50, 0x4f, 0x54, 0xe6, 0x62, 0x78, 0x99, 0xc7,
	0x0e, 0xb9, 0x61, 0x0a, 0x74, 0x42, 0x73, 0x54, 0xf4, 0xad, 0x44, 0xa5, 0x59, 0xba, 0x31, 0x96,
	0x50, 0x3a, 0xdc, 0xaf, 0x1e, 0xbd, 0x31, 0x26, 0xe2, 0x7b, 0xa9, 0x1f, 0xa8, 0xee, 0x05, 0xd4,
	0xf5, 0x5e, 0x1f, 0xbb, 0x68, 0x97, 0xa6, 0x31, 0x40, 0x17, 0x31, 0xe0, 0xc5, 0x76, 0x68, 0x9e,
	0x8e, 0x90, 0x6c, 0xa3, 0x57, 0x62, 0x42, 0x92, 0xb4, 0xb8, 0xc3, 0x93, 0x1d, 0x0b, 0xf3, 0x8d,
	0xc1, 0x3b, 0x47, 0xf5, 0x0b, 0x71, 0x47, 0x29, 0x91, 0x6c, 0x90, 0x1a, 0xc6, 0x29, 0x31, 0x48,
	0x7f, 0xe5, 0x6b, 0x78, 0x08, 0x72, 0xbd, 0x92, 0x0b, 0x0b, 0xed, 0xd0, 0x1c, 0xf2, 0xd5, 0x50,
	0x1a, 0x68, 0xbb, 0xe0, 0x12, 0xcb, 0xf1, 0x31, 0x69, 0xcb, 0x76, 0xb5, 0xd7, 0x1d, 0xe2, 0x83,
	0x3c, 0xce, 0x07, 0xb9, 0x1b, 0x4d, 0x68, 0x44, 0x7e, 0x96, 0x11, 0xb0, 0xa6, 0x9f, 0xa6, 0x0c,
	0xf9, 0xcc, 0x5a, 0xf3, 0xbd, 0x6d, 0x8a, 0x7d, 0xa3, 0x47, 0x8c, 0xf5, 0xe7, 0xdb, 0xa1, 0xd9,
	0x23, 0x80, 0xa9, 0x48, 0xde, 0x09, 0xcd, 0xc7, 0x85, 0x3b, 0xb2, 0xb0, 0xeb, 0x48, 0xe7, 0x9a,
	0x82, 0x5f, 0x69, 0xfa, 0x39, 0x82, 0x98, 0xc5, 0x7c, 0xc4, 0x4f, 0x35, 0xe4, 0xa6, 0x13, 0xdb,
	0x2b, 0x3a, 0x7b, 0xfd, 0x20, 0x34, 0xf5, 0x3b, 0x93, 0x2b, 0x59, 0x58, 0xd7, 0x09, 0x62, 0xd9,
	0x1c, 0x9b, 0xa2, 0xe3, 0x4c, 0xa4, 0x08, 0xe1, 0x72, 0x83, 0xdc, 0x97, 0x14, 0xae, 0xa5, 0x2e,
	0x60, 0x3f, 0x41, 0x6c, 0x25, 0xa1, 0x93, 0x2c, 0x88, 0x3f, 0x97, 0x78, 0xba, 0x18, 0x51, 0x6c,
	0x35, 0x8c, 0x33, 0x62, 0x29, 0x7c, 0x9b, 0x2f, 0x85, 0x93, 0x77, 0x26, 0x57, 0xe6, 0xb9, 0x98,
	0x4f, 0xfe, 0x19, 0x82, 0x58, 0xf4, 0xe1, 0x90, 0x80, 0x89, 0xe4, 0xa7, 0x92, 0x90, 0x95, 0xe5,
	0xca, 0xbd, 0xd1, 0xde, 0xaf, 0x96, 0xda, 0x97, 0x45, 0xe9, 0x0e, 0xca, 0x3a, 0x86, 0x40, 0x66,
	0x1f, 0xc9, 0xc0, 0xdf, 0x35, 0x7d, 0x28, 0x4f, 0xde, 0xc7, 0x04, 0x6f, 0x8b, 0x95, 0x7c, 0x56,
	0xd0, 0xdf, 0xe3, 0xf4, 0x4f, 0xdd, 0x99, 0x5c, 0x81, 0x11, 0xc0, 0x1d, 0xe8, 0x23, 0x88, 0x25,
	0x9f, 0xa9, 0x0b, 0xd5, 0xc4, 0x85, 0x3c, 0x22, 0x39, 0x71, 0x4d, 0x76, 0x42, 0x61, 0x43, 0x25,
	0xe4, 0x8e, 0x5c, 0xe3, 0x8e, 0xc8, 0x14, 0xe0, 0x80, 0xec, 0x4a, 0x22, 0x55, 0x38, 0xc3, 0x9c,
	0x06, 0xf6, 0x02, 0x66, 0x51, 0xa3, 0x2f, 0xef, 0xcc, 0x4a, 0x04, 0x2c, 0xc7, 0xce, 0x24, 0x9f,
	0x7c, 0xa5, 0xd7, 0x72, 0xce, 0xe4, 0x91, 0x6e, 0xdb, 0x4f, 0x61, 0x43, 0x25, 0x4c, 0xb7, 0x9c,
	0x4c, 0x21, 0xef, 0x4c, 0x22, 0x05, 0x3f, 0xd5, 0x74, 0x23, 0xa0, 0x68, 0x1d, 0x5b, 0x3e, 0xe6,
	0xe7, 0xbe, 0x43, 0xd6, 0x2d, 0x64, 0xdb, 0xb8, 0xc9, 0x70, 0xcd, 0x00, 0xc2, 0x1b, 0xc4, 0x77,
	0xc0, 0x2a, 0x9c, 0x8c, 0xa5, 0x7c, 0x07, 0x04, 0x7e, 0xf2, 0xd5, 0x09, 0xcd, 0xb3, 0xc2, 0x89,
	0x4c, 0x24, 0x11, 0x96, 0x15, 0x73, 0x5f, 0x7c, 0xc5, 0x67, 0x26, 0xe1, 0xa0, 0xa0, 0x00, 0x13,
	0x06, 0x89, 0x1c, 0xbc, 0xa9, 0x0f, 0x14, 0xc9, 0x51, 0x8c, 0x89, 0xd1, 0x2f, 0x88, 0xcd, 0x1d,
	0x84, 0xe6, 0x89, 0x55, 0xb8, 0x8c, 0x31, 0x69, 0x87, 0xe6, 0x89, 0xc0, 0xe7, 0xbf, 0x3a, 0xa1,
	0xd9, 0x13, 0x13, 0xe2, 0x9f, 0x12, 0x99, 0x44, 0x21, 0xfd, 0xb5, 0xd7, 0xaa, 0xc6, 0xcd, 0x21,
	0xc8, 0x13, 0xe0, 0x32, 0xf0, 0x43, 0x4d, 0x7f, 0xb4, 0xd8, 0x7b, 0x40, 0x9c, 0xd7, 0x03, 0x6c,
	0x39, 0x35, 0x63, 0x40, 0x24, 0x11, 0xaf, 0x45, 0x63, 0xb3, 0x2a, 0xc4, 0x73, 0x33, 0xd1, 0xd8,
	0xc4, 0x5f, 0xf2, 0xd8, 0x24, 0x0a, 0x95, 0x68, 0x50, 0x92, 0xcf, 0x8e, 0xfc, 0x15, 0x0f, 0x4a,
	0x82, 0x15, 0x07, 0x25, 0xd1, 0x02, 0x1f, 0x69, 0x7a, 0x7f, 0x89, 0x97, 0xef, 0x1a, 0xe7, 0x04,
	0xa3, 0xef, 0xf2, 0xb5, 0x77, 0x7c, 0x15, 0xae, 0xc2, 0xf9, 0x76, 0x68, 0x1e, 0x0f, 0xfc, 0x55,
	0x38, 0xdf, 0x09, 0xcd, 0x9b, 0x09, 0x11, 0x38, 0x2f, 0xad, 0xae, 0x0d, 0xc6, 0x9a, 0xf4, 0xd6,
	0xd5, 0xab, 0x35, 0xc4, 0xd0, 0x15, 0xba, 0x4b, 0x6c, 0xb6, 0xc1, 0x8b, 0x35, 0x82, 0xd9, 0x55,
	0x82, 0xb7, 0xb9, 0x94, 0x13, 0x8e, 0x8d, 0x24, 0x3f, 0x0e, 0xf7, 0xab, 0x0f, 0xd0, 0x70, 0xaf,
	0x55, 0x8d, 0x58, 0xc0, 0xbe, 0x82, 0x1f, 0xbe, 0x0b, 0xfe, 0xa3, 0xe9, 0x66, 0xd1, 0x85, 0xa6,
	0x47, 0xf9, 0x09, 0x47, 0xb1, 0x1d, 0xf8, 0xd8, 0xdd, 0x35, 0x06, 0x45, 0xf8, 0xfd, 0xb1, 0xa8,
	0x20, 0x56, 0xe1, 0x92, 0x47, 0xd9, 0x5c, 0x0a, 0xb6, 0x43, 0xf3, 0x6c, 0xe0, 0xe7, 0x65, 0x9d,
	0xd0, 0x7c, 0x22, 0x76, 0x32, 0x0f, 0x48, 0xfe, 0xd6, 0x91, 0x4b, 0x45, 0x48, 0x2e, 0xb7, 0x56,
	0xc8, 0x78, 0xe6, 0x29, 0x5a, 0xf0, 0x7a, 0xa1, 0x48, 0x01, 0x5e, 0xcc, 0xbb, 0x95, 0x47, 0xc1,
	0xbf, 0x15, 0x1e, 0x3a, 0xc4, 0x61, 0x0e, 0xaf, 0x23, 0xf8, 0x79, 0x67, 0x51, 0x63, 0x48, 0xac,
	0xe2, 0x1f, 0x89, 0xea, 0x61, 0x15, 0xce, 0x45, 0xe8, 0x0c, 0x07, 0x79, 0xc0, 0x38, 0x13, 0xf8,
	0x39, 0x51, 0x1a, 0x2e, 0x0a, 0x72, 0x39, 0x58, 0xdc, 0x1c, 0xcb, 0x05, 0xf0, 0xa2, 0x85, 0xb2,
	0x88, 0x9f, 0x40, 0xbc, 0x15, 0x2f, 0x18, 0x0a, 0x14, 0xe0, 0x85, 0xbc, 0x83, 0x39, 0x10, 0x78,
	0x7a, 0x9f, 0x8f, 0xa3, 0xc3, 0xd9, 0x23, 0xd6, 0x36, 0xda, 0xc4, 0x41, 0xd3, 0x30, 0xc4, 0x94,
	0x4d, 0x73, 0xf2, 0x31, 0xb8, 0x48, 0x5e, 0x15, 0x50, 0x4a, 0xbe, 0x20, 0xef, 0x7a, 0x48, 0x17,
	0x0d, 0x80, 0x77, 0x35, 0x7d, 0x08, 0x05, 0xcc, 0xb3, 0x82, 0xe6, 0xba, 0x8f, 0x6a, 0x38, 0x4b,
	0x86, 0x36, 0x8c, 0x47, 0xc5, 0x40, 0x2e, 0xf1, 0x92, 0x8b, 0xab, 0xac, 0x46, 0x1a, 0x49, 0x1e,
	0xf1, 0x72, 0x5a, 0x9d, 0xa8, 0x40, 0x79, 0xf8, 0x26, 0xe4, 0xcc, 0x70, 0x7c, 0x02, 0x2a, 0xad,
	0x81, 0x86, 0x3e, 0x94, 0x70, 0x60, 0x9e, 0xd5, 0xf4, 0xf9, 0x14, 0x8b, 0xb3, 0x98, 0x1a, 0xe7,
	0xc5, 0x00, 0xdc, 0xe0, 0x44, 0x62, 0x95, 0x15, 0x6f, 0xc9, 0xc7, 0x30, 0xc6, 0x3b, 0xa1, 0x79,
	0x3e, 0x9a, 0x42, 0x05, 0x58, 0x81, 0xca, 0x36, 0x60, 0x4b, 0x07, 0x9b, 0x18, 0x37, 0x2d, 0x86,
	0x1b, 0x4d, 0xcf, 0x47, 0xbe, 0x83, 0xa9, 0xb5, 0x61, 0x5c, 0x10, 0x2e, 0xbf, 0xcc, 0x37, 0x02,
	0x47, 0x57, 0x32, 0x90, 0xbb, 0x7b, 0x49, 0xf4, 0x52, 0x04, 0xe4, 0x5a, 0xec, 0xba, 0xec, 0xea,
	0xc4, 0x75, 0x58, 0xb2, 0x02, 0x76, 0xf5, 0x7e, 0x1b, 0xd9, 0x1b, 0xd8, 0x72, 0xd6, 0x89, 0xe7,
	0xe3, 0x9a, 0x55, 0x77, 0x5c, 0x4c, 0x8d, 0x8b, 0xc2, 0xc5, 0x39, 0x7e, 0xa2, 0x09, 0x78, 0x2e,
	0x42, 0x67, 0x39, 0x98, 0x0e, 0x74, 0x09, 0x29, 0xed, 0xc1, 0x74, 0x6f, 0xc1, 0xb2, 0x19, 0xf0,
	0x7d, 0x4d, 0x3f, 0xdf, 0xf4, 0xbd, 0x75, 0x5e, 0xcc, 0x58, 0x41, 0xb3, 0x86, 0x18, 0x96, 0x0b,
	0x84, 0xc7, 0x84, 0xef, 0x2b, 0x3c, 0xbf, 0x4d, 0xb4, 0x56, 0x85, 0x92, 0x5c, 0x0c, 0x44, 0x45,
	0x76, 0x17, 0x5c, 0xa2, 0xf3, 0xbc, 0x34, 0x10, 0xda, 0xf3, 0xb0, 0x9b, 0x45, 0xf0, 0x8e, 0xa6,
	0x0f, 0xba, 0x4e, 0xc3, 0x61, 0xd6, 0x1a, 0x22, 0xb5, 0x6d, 0xa7, 0xc6, 0x36, 0x2c, 0x87, 0x58,
	0x2e, 0x22, 0xc6, 0xb0, 0x18, 0x92, 0x05, 0x51, 0x3c, 0x72, 0x8d, 0xa9, 0x44, 0x61, 0x8e, 0xcc,
	0x23, 0x92, 0x15, 0xfc, 0x65, 0xec, 0x1e, 0xc3, 0xa2, 0x32, 0x05, 0xde, 0xd6, 0x74, 0xd0, 0x70,
	0x88, 0xb5, 0xe1, 0x35, 0xb0, 0x55, 0x73, 0xe8, 0xa6, 0x55, 0xf7, 0x31, 0x36, 0xcc, 0x11, 0x6d,
	0xf4, 0xd4, 0x44, 0xcf, 0x95, 0xe8, 0x66, 0xed, 0xca, 0xb2, 0xf3, 0x06, 0x9e, 0x7a, 0xe9, 0xe3,
	0xd0, 0x3c, 0xc2, 0x77, 0x62, 0xc3, 0x21, 0x2f, 0x7b, 0x0d, 0x3c, 0xe3, 0xd0, 0xcd, 0x59, 0x1f,
	0xe3, 0x74, 0x75, 0x14, 0xe4, 0xf2, 0x3e, 0x18, 0xb9, 0xcc, 0x89, 0x1c, 0x1b, 0x1f, 0xb9, 0x0c,
	0x8b, 0xcd, 0xc1, 0x5d, 0x4d, 0xef, 0x49, 0xd6, 0xbb, 0x38, 0x76, 0x46, 0xc4, 0xb1, 0xf3, 0x17,
	0x91, 0xf2, 0x24, 0x8b, 0x36, 0x3a, 0x7c, 0x4e, 0xf9, 0xd9, 0x67, 0x27, 0x34, 0x67, 0x92, 0x8a,
	0x23, 0x91, 0x29, 0x0e, 0xa2, 0x78, 0x07, 0xd0, 0xc2, 0x99, 0xd2, 0xc0, 0x0c, 0x5d, 0xf9, 0x1a,
	0xf5, 0x08, 0x8f, 0xdd, 0x39, 0xb3, 0xf9, 0xcf, 0xc3, 0xfd, 0xea, 0xe8, 0x83, 0x9a, 0xe2, 0xf9,
	0x91, 0xc4, 0x17, 0x66, 0x76, 0x7c, 0x17, 0xbc, 0xaa, 0xf7, 0x21, 0x77, 0x9b, 0x57, 0x5f, 0xd1,
	0x6d, 0x02, 0xc1, 0x8c, 0x1a, 0x8f, 0x8b, 0x4b, 0x3c, 0x5e, 0xf4, 0x9e, 0x89, 0x40, 0x51, 0x95,
	0xdf, 0xc1, 0x8c, 0x2f, 0xfc, 0x81, 0x28, 0xc2, 0xe4, 0xe4, 0x15, 0x58, 0x54, 0x04, 0xff, 0xd3,
	0xf4, 0x51, 0x6f, 0x0b, 0xfb, 0xdb, 0xbe, 0xc3, 0x78, 0xe0, 0x68, 0x78, 0x0c, 0x5b, 0x35, 0xbc,
	0xe5, 0xd8, 0xd8, 0x22, 0xa8, 0x81, 0x29, 0x0f, 0xa7, 0x71, 0x21, 0x64, 0x54, 0xb2, 0xeb, 0xa5,
	0xa1, 0xc5, 0xa4, 0x11, 0x14, 0x6d, 0x66, 0xf0, 0xd6, 0x1d, 0xae, 0xde, 0x0e, 0xcd, 0x4b, 0x5e,
	0x09, 0x72, 0x6c, 0x2c, 0xd0, 0x45, 0x32, 0x1d, 0x99, 0xea, 0x84, 0xe6, 0x0b, 0x82, 0xe0, 0x03,
	0xe8, 0x76, 0x5f, 0x94, 0xbc, 0x8a, 0xeb, 0xc2, 0x03, 0x3e, 0x08, 0x0b, 0xf0, 0x96, 0x7e, 0x8e,
	0x87, 0x31, 0xcb, 0x21, 0x35, 0xbc, 0x63, 0xf1, 0x95, 0xbc, 0xe6, 0x7a, 0xf6, 0x26, 0x35, 0x2e,
	0x89, 0x2d, 0xcd, 0x17, 0x0d, 0xe0, 0x0a, 0x73, 0x1c, 0x5f, 0x70, 0xc8, 0x94, 0x40, 0xd3, 0x5b,
	0xdb, 0x32, 0xa4, 0xcc, 0x94, 0xa3, 0xfc, 0x17, 0x2a, 0x2c, 0x81, 0x7f, 0xf1, 0x74, 0x97, 0x20,
	0x7b, 0x13, 0xd7, 0x2c, 0xe2, 0x31, 0xa7, 0xee, 0xd8, 0x28, 0xba, 0x7f, 0xa8, 0x51, 0xa3, 0x2a,
	0xe6, 0xf7, 0x3d, 0x3e, 0xdc, 0x83, 0xab, 0x91, 0xd2, 0x1d, 0x49, 0x67, 0x6e, 0x86, 0x8f, 0xf6,
	0x60, 0xa0, 0x44, 0x3a, 0xa1, 0x79, 0x21, 0x0a, 0xed, 0x2a, 0x58, 0xdc, 0x55, 0x2a, 0x91, 0xce,
	0x7e, 0xb5, 0x8b, 0xc5, 0xbd, 0x56, 0xb5, 0x0b, 0x0b, 0xa8, 0x6c, 0x51, 0xa3, 0x00, 0xea, 0xa7,
	0x99, 0x8f, 0xea, 0x75, 0xc7, 0xb6, 0x6c, 0x17, 0x51, 0x6a, 0x5c, 0x16, 0xc3, 0xfa, 0x1c, 0xaf,
	0x97, 0x63, 0x60, 0x9a, 0xcb, 0x3b, 0xa1, 0x09, 0xa2, 0x01, 0x95, 0x84, 0xe9, 0x45, 0x4d, 0x4e,
	0x15, 0xbc, 0xa9, 0xf7, 0xc7, 0x43, 0x6c, 0xd5, 0x3d, 0xb7, 0x86, 0x7d, 0xab, 0x89, 0xd8, 0x86,
	0xf1, 0x84, 0xd8, 0xf5, 0xb7, 0x0f, 0x42, 0xf3, 0xc2, 0x0c, 0x6e, 0xfa, 0xd8, 0x46, 0x0c, 0xd7,
	0x66, 0x22, 0xc5, 0x59, 0xa1, 0xb7, 0x84, 0xd8, 0x46, 0x3b, 0x34, 0xb5, 0xe7, 0xd2, 0xea, 0xbc,
	0x56, 0x84, 0x9f, 0xf5, 0x1a, 0x0e, 0x9f, 0x24, 0xb6, 0x5b, 0x31, 0x34, 0xd8, 0x57, 0xc2, 0xc1,
	0xa6, 0x7e, 0x96, 0x62, 0x66, 0xb9, 0xde, 0xb6, 0xd5, 0xf4, 0x1d, 0xcf, 0x77, 0xd8, 0xae, 0xf1,
	0xa4, 0xd8, 0x14, 0x93, 0xed, 0xd0, 0xec, 0xa5, 0x98, 0xcd, 0x7b, 0xdb, 0x4b, 0x31, 0x92, 0x46,
	0xb6, 0xbc, 0xb8, 0x6b, 0x8a, 0x51, 0x68, 0x0e, 0xde, 0xd7, 0xf4, 0xc1, 0x06, 0xda, 0x49, 0xdc,
	0xb4, 0x3d, 0x62, 0x07, 0xbe, 0x8f, 0x89, 0xbd, 0x6b, 0x8c, 0x8a, 0x71, 0xa4, 0xe2, 0xb2, 0x05,
	0x6d, 0x2f, 0xa0, 0x9d, 0x88, 0xe3, 0x74, 0xa6, 0xc2, 0x8f, 0xfc, 0x86, 0x42, 0x9e, 0x1e, 0xf9,
	0x2a, 0x30, 0x19, 0x72, 0x71, 0x3b, 0xa2, 0xb6, 0x0b, 0x95, 0x56, 0xc1, 0x27, 0x9a, 0xde, 0x6f,
	0xfb, 0x88, 0x6e, 0x14, 0x6a, 0x80, 0xa7, 0xc4, 0xb4, 0x7c, 0x20, 0x6a, 0x80, 0xe9, 0xa4, 0x06,
	0xb0, 0xe3, 0x1a, 0x60, 0x36, 0x3a, 0x9b, 0x79, 0xb3, 0x2c, 0x1b, 0x57, 0x86, 0x61, 0xa1, 0x53,
	0xce, 0xeb, 0x85, 0x98, 0xaf, 0xe5, 0xbe, 0x92, 0x11, 0x5e, 0x1d, 0xd8, 0x71, 0x75, 0x50, 0x7d,
	0x10, 0x33, 0xbc, 0x3e, 0x98, 0x8e, 0xea, 0x83, 0x82, 0x31, 0xdf, 0x05, 0x3f, 0xd7, 0xf4, 0xa1,
	0xa2, 0x7b, 0xc9, 0xb5, 0xcc, 0xd3, 0x62, 0xfe, 0x9d, 0x83, 0xd0, 0x3c, 0x39, 0x0d, 0xa5, 0x17,
	0x85, 0xbc, 0x95, 0xe2, 0x8b, 0x82, 0x12, 0xed, 0xb6, 0x34, 0xf6, 0x5a, 0xd5, 0xcc, 0x36, 0x54,
	0x5b, 0x06, 0xdf, 0xd2, 0xf4, 0x41, 0xca, 0x02, 0x62, 0xf1, 0xcc, 0x09, 0xb9, 0xce, 0x16, 0xb6,
	0xa2, 0x7c, 0x98, 0x1a, 0xcf, 0xa4, 0xf9, 0x68, 0x3f, 0xd7, 0xb8, 0x9d, 0x28, 0x2c, 0x73, 0x7c,
	0x39, 0xcd, 0x92, 0x14, 0x58, 0x3e, 0x99, 0x97, 0x02, 0xda, 0xb1, 0xf1, 0x9b, 0x63, 0x50, 0x65,
	0x8d, 0xd7, 0xc8, 0x05, 0x1a, 0x3c, 0xae, 0x52, 0xe3, 0x59, 0x41, 0xe2, 0x15, 0x9e, 0xa8, 0xe5,
	0x9a, 0x2d, 0x38, 0x24, 0xab, 0x25, 0x4a, 0x88, 0x9c, 0x23, 0xe6, 0x02, 0xea, 0xc4, 0x18, 0x2c,
	0xdb, 0xe1, 0x59, 0x79, 0x8f, 0xe8, 0x3d, 0x79, 0xe8, 0x7a, 0x4e, 0xc4, 0xd0, 0xda, 0x41, 0x68,
	0xf6, 0x42, 0xb4, 0xbd, 0xcc, 0x02, 0xe9, 0x89, 0xeb, 0x14, 0xcd, 0x3e, 0xd3, 0xcb, 0xa8, 0x4c,
	0x76, 0xdf, 0x67, 0xb8, 0x82, 0x45, 0x28, 0xdb, 0x03, 0x5b, 0xfa, 0x19, 0x5e, 0x76, 0xae, 0x21,
	0x8a, 0xad, 0xe8, 0xcd, 0xd1, 0xb8, 0x32, 0xa2, 0x8d, 0xf6, 0x4e, 0xf4, 0x26, 0x69, 0xd1, 0x8a,
	0x90, 0x8a, 0xdb, 0xc3, 0xde, 0x44, 0x35, 0x92, 0xa5, 0x91, 0x23, 0x2f, 0xae, 0x8c, 0xc4, 0x45,
	0x48, 0xbc, 0x3c, 0xde, 0x6e, 0x55, 0x35, 0x58, 0x68, 0x0a, 0x7e, 0x70, 0x54, 0xbf, 0xc4, 0xa3,
	0x46, 0x1a, 0x2e, 0x78, 0x11, 0x6b, 0x7b, 0x0d, 0xbe, 0x64, 0x7d, 0xfc, 0x7a, 0x80, 0x29, 0xb3,
	0x36, 0x9d, 0x35, 0xe3, 0xaa, 0x98, 0x8e, 0xbf, 0x69, 0xf1, 0x5b, 0xe5, 0x02, 0xda, 0x99, 0x9e,
	0x83, 0x11, 0x7e, 0xdb, 0x99, 0x6a, 0x87, 0xa6, 0xd9, 0x40, 0x3b, 0xe9, 0x16, 0x67, 0x73, 0xb1,
	0x8d, 0x4c, 0x25, 0x3d, 0x05, 0xef, 0xa3, 0x27, 0x15, 0x80, 0xf7, 0x35, 0x79, 0x7f, 0x95, 0xf8,
	0xf5, 0xb3, 0x40, 0x17, 0xde, 0xa7, 0xd9, 0x1a, 0xf8, 0x4c, 0xd3, 0x07, 0xd3, 0x27, 0x18, 0x17,
	0xc9, 0x8f, 0xb6, 0x63, 0x62, 0x03, 0x7f, 0xc8, 0x47, 0x62, 0x20, 0x79, 0xc2, 0x98, 0x9f, 0xbc,
	0x23, 0xbf, 0xdb, 0x0e, 0x20, 0x85, 0x3c, 0x4d, 0xa4, 0x55, 0xa0, 0xea, 0xe5, 0x4c, 0x69, 0xa4,
	0x8b, 0x5c, 0xda, 0xfa, 0x4a, 0x52, 0x30, 0x6b, 0x85, 0xa4, 0x47, 0xdf, 0x2d, 0xfd, 0xbc, 0x78,
	0x65, 0xa9, 0x07, 0xae, 0x1b, 0x67, 0x35, 0x1e, 0x49, 0x4a, 0x54, 0x63, 0x5c, 0x78, 0x7a, 0x8b,
	0x67, 0x0d, 0x5c, 0x6b, 0x36, 0x70, 0x5d, 0x91, 0x8f, 0x2c, 0x92, 0xb8, 0xa8, 0xec, 0x84, 0xe6,
	0xc5, 0xf8, 0xc8, 0x52, 0xc1, 0x15, 0xd8, 0xa5, 0x1d, 0x78, 0x45, 0x3f, 0x5d, 0xc7, 0x88, 0x05,
	0x3e, 0xb6, 0xea, 0x2e, 0x5a, 0xa7, 0xc6, 0x84, 0xd8, 0x77, 0x97, 0xf9, 0x49, 0x1f, 0x03, 0xb3,
	0x5c, 0x9e, 0xbe, 0xc8, 0x48, 0xc2, 0x0a, 0xcc, 0xa9, 0x80, 0x6d, 0x7d, 0x48, 0x7a, 0x88, 0x89,
	0x6a, 0x1c, 0x4c, 0xbc, 0x60, 0x7d, 0xc3, 0xb8, 0x26, 0x16, 0xed, 0x8b, 0x22, 0xbc, 0xa6, 0x2a,
	0xf3, 0x5c, 0xe3, 0x25, 0xa1, 0x90, 0x66, 0x3d, 0x4a, 0x34, 0xcd, 0x28, 0xd4, 0x8d, 0xc1, 0xa6,
	0x3e, 0x50, 0xea, 0xb8, 0x81, 0x76, 0x8c, 0xeb, 0xa2, 0xd7, 0x17, 0x78, 0x32, 0x58, 0x68, 0xb8,
	0x80, 0x76, 0x3a, 0xa1, 0x69, 0xa8, 0xba, 0x5c, 0x40, 0x3b, 0x69, 0x7f, 0x8a, 0x66, 0xe0, 0xdd,
	0xa3, 0xba, 0x99, 0xdc, 0x2e, 0x59, 0xc8, 0xe5, 0x29, 0x85, 0xe7, 0xd6, 0x2c, 0xe6, 0x52, 0x8b,
	0xc7, 0x0f, 0xc7, 0x23, 0xd4, 0x78, 0x5e, 0xcc, 0xd7, 0x47, 0x7c, 0x65, 0x5e, 0x48, 0xee, 0x72,
	0x26, 0xb9, 0xea, 0xa2, 0x5b, 0x5b, 0x99, 0x5f, 0xfe, 0x52, 0xac, 0xd7, 0x0e, 0xcd, 0x0b, 0x4e,
	0x77, 0x38, 0xcd, 0x77, 0xee, 0xa1, 0xc3, 0xd7, 0xe7, 0x3d, 0x6d, 0xdc, 0x1b, 0xde, 0x6b, 0x55,
	0xef, 0x45, 0x10, 0x96, 0xdb, 0xba, 0x34, 0x01, 0xc1, 0x5b, 0xfa, 0xa3, 0x51, 0x51, 0x23, 0x0d,
	0x7e, 0x9a, 0x5d, 0xdd, 0x10, 0x63, 0x3f, 0xcd, 0x6b, 0x6b, 0xa1, 0x34, 0x9d, 0xea, 0x48, 0x69,
	0xd6, 0x63, 0xd9, 0x63, 0x68, 0x19, 0x4f, 0x67, 0xa1, 0x9b, 0x01, 0xf0, 0x75, 0xbd, 0x27, 0x68,
	0x92, 0x66, 0x7a, 0xa2, 0xff, 0x7a, 0x56, 0x8c, 0xfb, 0x97, 0x0f, 0x42, 0xf3, 0x5c, 0x96, 0x4c,
	0xae, 0x2e, 0x91, 0xa5, 0xec, 0x78, 0x17, 0x69, 0x64, 0x9c, 0x61, 0x37, 0x49, 0x33, 0x06, 0xa4,
	0x04, 0x72, 0xaf, 0x55, 0x55, 0x37, 0x36, 0x34, 0x78, 0x4a, 0x6a, 0x02, 0x7e, 0xa9, 0xc5, 0xdd,
	0x27, 0xef, 0x27, 0xef, 0xcf, 0x0a, 0x9f, 0xdf, 0x16, 0x01, 0x29, 0x6f, 0x22, 0x7d, 0x4b, 0x11,
	0xdd, 0x8f, 0xa4, 0xdd, 0xcb, 0x6f, 0x20, 0x12, 0x87, 0x2c, 0xf2, 0x9e, 0xef, 0xae, 0xc5, 0x23,
	0x8c, 0xaa, 0x17, 0x43, 0x83, 0x7a, 0xd6, 0x0a, 0xfc, 0x5e, 0xd3, 0x7b, 0x05, 0xcd, 0xec, 0xa5,
	0xe4, 0x37, 0x11, 0xd1, 0xef, 0x88, 0x02, 0x25, 0x6f, 0x42, 0x7a, 0x35, 0x11, 0x54, 0x2b, 0x29,
	0xd5, 0xfc, 0x3b, 0x87, 0x92, 0xec, 0xc5, 0x7b, 0xe9, 0xf1, 0x32, 0x44, 0xdd, 0x97, 0xa1, 0xc1,
	0x1e, 0xb9, 0x65, 0x46, 0x39, 0x7b, 0x0f, 0xf9, 0xa0, 0x3b, 0x65, 0xe9, 0x6d, 0xa4, 0x40, 0x39,
	0xff, 0x9a, 0xd1, 0x9d, 0x72, 0x37, 0xbd, 0x32, 0xe5, 0x44, 0x33, 0xa1, 0x9c, 0x3e, 0x7f, 0xd4,
	0xf5, 0xe8, 0xdd, 0x35, 0xcd, 0x5f, 0x7e, 0x3b, 0x2b, 0x02, 0xe9, 0x17, 0xf2, 0x7c, 0xc5, 0xd3,
	0x65, 0x96, 0xc8, 0x48, 0x8b, 0xd1, 0xcf, 0x90, 0x7c, 0x35, 0xd3, 0x23, 0x21, 0x54, 0xdc, 0x1e,
	0x95, 0x2f, 0x6e, 0xac, 0xa6, 0xcd, 0x8c, 0x0f, 0xf9, 0x10, 0x69, 0x53, 0x0b, 0x07, 0xa1, 0x79,
	0x31, 0xeb, 0x71, 0x21, 0x7f, 0xed, 0xb2, 0x64, 0xb3, 0xfc, 0x38, 0x35, 0x4a, 0x78, 0xbe, 0x7b,
	0x50, 0x56, 0xe0, 0xc9, 0xda, 0x40, 0x21, 0x55, 0xa1, 0x36, 0x22, 0xd4, 0xf8, 0x5d, 0x34, 0x4b,
	0x2b, 0x05, 0x0a, 0xf2, 0x11, 0xbf, 0xcc, 0x15, 0x0b, 0x14, 0x4a, 0x78, 0x79, 0xaa, 0x04, 0x93,
	0x92, 0xde, 0xd4, 0xed, 0x8f, 0x3f, 0x1d, 0x3e, 0xd2, 0xfa, 0x74, 0xf8, 0xc8, 0xc7, 0x07, 0xc3,
	0x5a, 0xeb, 0x60, 0x58, 0xfb, 0xde, 0xdd, 0xe1, 0x23, 0xef, 0xdd, 0x1d, 0xd6, 0x5a, 0x77, 0x87,
	0x8f, 0xfc, 0xf3, 0xee, 0xf0, 0x91, 0xd7, 0x9e, 0x5a, 0x77, 0xd8, 0x46, 0xb0, 0x76, 0xc5, 0xf6,
	0x1a, 0x57, 0xd3, 0x02, 0x42, 0xfa, 0x95, 0xfd, 0x91, 0x6c, 0xed, 0x84, 0xf8, 0xe7, 0xd8, 0xb5,
	0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xef, 0xc2, 0x57, 0xc8, 0xa5, 0x26, 0x00, 0x00,
}

func (m *OptionsConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptionsConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OptionsConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeprecatedMaxConcurrentScans != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.DeprecatedMaxConcurrentScans))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
		i--
		dAtA[i] = 0xf0
	}
	if m.DeprecatedMinHomeDiskFreePct != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DeprecatedMinHomeDiskFreePct))))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
		i--
		dAtA[i] = 0xe9
	}
	if len(m.DeprecatedRelayServers) > 0 {
		for iNdEx := len(m.DeprecatedRelayServers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeprecatedRelayServers[iNdEx])
			copy(dAtA[i:], m.DeprecatedRelayServers[iNdEx])
			i = encodeVarintOptionsconfiguration(dAtA, i, uint64(len(m.DeprecatedRelayServers[iNdEx])))
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0xb2
			i--
			dAtA[i] = 0xe2
		}
	}
	if m.DeprecatedUPnPTimeoutS != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.DeprecatedUPnPTimeoutS))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
		i--
		dAtA[i] = 0xd8
	}
	if m.DeprecatedUPnPRenewalM != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.DeprecatedUPnPRenewalM))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
		i--
		dAtA[i] = 0xd0
	}
	if m.DeprecatedUPnPLeaseM != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.DeprecatedUPnPLeaseM))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
		i--
		dAtA[i] = 0xc8
	}
	if m.DeprecatedUPnPEnabled {
		i--
		if m.DeprecatedUPnPEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
		i--
		dAtA[i] = 0xc0
	}
	if m.LocalConnectionPriority != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.LocalConnectionPriority))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.InsecureAllowOldTLSVersions {
		i--
		if m.InsecureAllowOldTLSVersions {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.ConnectionLimitMax != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.ConnectionLimitMax))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.ConnectionLimitEnough != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.ConnectionLimitEnough))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	if len(m.FeatureFlags) > 0 {
		for iNdEx := len(m.FeatureFlags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FeatureFlags[iNdEx])
			copy(dAtA[i:], m.FeatureFlags[iNdEx])
			i = encodeVarintOptionsconfiguration(dAtA, i, uint64(len(m.FeatureFlags[iNdEx])))
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0x92
		}
	}
	if m.SendFullIndexOnUpgrade {
		i--
		if m.SendFullIndexOnUpgrade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x88
	}
	if m.AnnounceLANAddresses {
		i--
		if m.AnnounceLANAddresses {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x80
	}
	if m.RawMaxCIRequestKiB != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.RawMaxCIRequestKiB))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf8
	}
	if m.DatabaseTuning != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.DatabaseTuning))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf0
	}
	if len(m.RawStunServers) > 0 {
		for iNdEx := len(m.RawStunServers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RawStunServers[iNdEx])
			copy(dAtA[i:], m.RawStunServers[iNdEx])
			i = encodeVarintOptionsconfiguration(dAtA, i, uint64(len(m.RawStunServers[iNdEx])))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xea
		}
	}
	if m.StunKeepaliveMinS != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.StunKeepaliveMinS))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe0
	}
	if m.StunKeepaliveStartS != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.StunKeepaliveStartS))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd8
	}
	if m.CREnabled {
		i--
		if m.CREnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	if len(m.CRURL) > 0 {
		i -= len(m.CRURL)
		copy(dAtA[i:], m.CRURL)
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(len(m.CRURL)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	if m.RawMaxFolderConcurrency != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.RawMaxFolderConcurrency))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if m.SetLowPriority {
		i--
		if m.SetLowPriority {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if len(m.DeprecatedDefaultFolderPath) > 0 {
		i -= len(m.DeprecatedDefaultFolderPath)
		copy(dAtA[i:], m.DeprecatedDefaultFolderPath)
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(len(m.DeprecatedDefaultFolderPath)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	if m.TrafficClass != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.TrafficClass))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if len(m.UnackedNotificationIDs) > 0 {
		for iNdEx := len(m.UnackedNotificationIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UnackedNotificationIDs[iNdEx])
			copy(dAtA[i:], m.UnackedNotificationIDs[iNdEx])
			i = encodeVarintOptionsconfiguration(dAtA, i, uint64(len(m.UnackedNotificationIDs[iNdEx])))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.TempIndexMinBlocks != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.TempIndexMinBlocks))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if m.OverwriteRemoteDevNames {
		i--
		if m.OverwriteRemoteDevNames {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if len(m.AlwaysLocalNets) > 0 {
		for iNdEx := len(m.AlwaysLocalNets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AlwaysLocalNets[iNdEx])
			copy(dAtA[i:], m.AlwaysLocalNets[iNdEx])
			i = encodeVarintOptionsconfiguration(dAtA, i, uint64(len(m.AlwaysLocalNets[iNdEx])))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.ReleasesURL) > 0 {
		i -= len(m.ReleasesURL)
		copy(dAtA[i:], m.ReleasesURL)
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(len(m.ReleasesURL)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	{
		size, err := m.MinHomeDiskFree.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xfa
	if m.LimitBandwidthInLan {
		i--
		if m.LimitBandwidthInLan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.ProgressUpdateIntervalS != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.ProgressUpdateIntervalS))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.CacheIgnoredFiles {
		i--
		if m.CacheIgnoredFiles {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.KeepTemporariesH != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.KeepTemporariesH))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.UpgradeToPreReleases {
		i--
		if m.UpgradeToPreReleases {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.AutoUpgradeIntervalH != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.AutoUpgradeIntervalH))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.RestartOnWakeup {
		i--
		if m.RestartOnWakeup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.URInitialDelayS != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.URInitialDelayS))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.URPostInsecurely {
		i--
		if m.URPostInsecurely {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if len(m.URURL) > 0 {
		i -= len(m.URURL)
		copy(dAtA[i:], m.URURL)
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(len(m.URURL)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.URUniqueID) > 0 {
		i -= len(m.URUniqueID)
		copy(dAtA[i:], m.URUniqueID)
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(len(m.URUniqueID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.URSeen != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.URSeen))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.URAccepted != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.URAccepted))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.NATTimeoutS != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.NATTimeoutS))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.NATRenewalM != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.NATRenewalM))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.NATLeaseM != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.NATLeaseM))
		i--
		dAtA[i] = 0x78
	}
	if m.NATEnabled {
		i--
		if m.NATEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.StartBrowser {
		i--
		if m.StartBrowser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.RelayReconnectIntervalM != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.RelayReconnectIntervalM))
		i--
		dAtA[i] = 0x58
	}
	if m.RelaysEnabled {
		i--
		if m.RelaysEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.ReconnectIntervalS != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.ReconnectIntervalS))
		i--
		dAtA[i] = 0x48
	}
	if m.MaxRecvKbps != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.MaxRecvKbps))
		i--
		dAtA[i] = 0x40
	}
	if m.MaxSendKbps != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.MaxSendKbps))
		i--
		dAtA[i] = 0x38
	}
	if len(m.LocalAnnMCAddr) > 0 {
		i -= len(m.LocalAnnMCAddr)
		copy(dAtA[i:], m.LocalAnnMCAddr)
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(len(m.LocalAnnMCAddr)))
		i--
		dAtA[i] = 0x32
	}
	if m.LocalAnnPort != 0 {
		i = encodeVarintOptionsconfiguration(dAtA, i, uint64(m.LocalAnnPort))
		i--
		dAtA[i] = 0x28
	}
	if m.LocalAnnEnabled {
		i--
		if m.LocalAnnEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.GlobalAnnEnabled {
		i--
		if m.GlobalAnnEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.RawGlobalAnnServers) > 0 {
		for iNdEx := len(m.RawGlobalAnnServers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RawGlobalAnnServers[iNdEx])
			copy(dAtA[i:], m.RawGlobalAnnServers[iNdEx])
			i = encodeVarintOptionsconfiguration(dAtA, i, uint64(len(m.RawGlobalAnnServers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RawListenAddresses) > 0 {
		for iNdEx := len(m.RawListenAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RawListenAddresses[iNdEx])
			copy(dAtA[i:], m.RawListenAddresses[iNdEx])
			i = encodeVarintOptionsconfiguration(dAtA, i, uint64(len(m.RawListenAddresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintOptionsconfiguration(dAtA []byte, offset int, v uint64) int {
	offset -= sovOptionsconfiguration(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OptionsConfiguration) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RawListenAddresses) > 0 {
		for _, s := range m.RawListenAddresses {
			l = len(s)
			n += 1 + l + sovOptionsconfiguration(uint64(l))
		}
	}
	if len(m.RawGlobalAnnServers) > 0 {
		for _, s := range m.RawGlobalAnnServers {
			l = len(s)
			n += 1 + l + sovOptionsconfiguration(uint64(l))
		}
	}
	if m.GlobalAnnEnabled {
		n += 2
	}
	if m.LocalAnnEnabled {
		n += 2
	}
	if m.LocalAnnPort != 0 {
		n += 1 + sovOptionsconfiguration(uint64(m.LocalAnnPort))
	}
	l = len(m.LocalAnnMCAddr)
	if l > 0 {
		n += 1 + l + sovOptionsconfiguration(uint64(l))
	}
	if m.MaxSendKbps != 0 {
		n += 1 + sovOptionsconfiguration(uint64(m.MaxSendKbps))
	}
	if m.MaxRecvKbps != 0 {
		n += 1 + sovOptionsconfiguration(uint64(m.MaxRecvKbps))
	}
	if m.ReconnectIntervalS != 0 {
		n += 1 + sovOptionsconfiguration(uint64(m.ReconnectIntervalS))
	}
	if m.RelaysEnabled {
		n += 2
	}
	if m.RelayReconnectIntervalM != 0 {
		n += 1 + sovOptionsconfiguration(uint64(m.RelayReconnectIntervalM))
	}
	if m.StartBrowser {
		n += 2
	}
	if m.NATEnabled {
		n += 2
	}
	if m.NATLeaseM != 0 {
		n += 1 + sovOptionsconfiguration(uint64(m.NATLeaseM))
	}
	if m.NATRenewalM != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.NATRenewalM))
	}
	if m.NATTimeoutS != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.NATTimeoutS))
	}
	if m.URAccepted != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.URAccepted))
	}
	if m.URSeen != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.URSeen))
	}
	l = len(m.URUniqueID)
	if l > 0 {
		n += 2 + l + sovOptionsconfiguration(uint64(l))
	}
	l = len(m.URURL)
	if l > 0 {
		n += 2 + l + sovOptionsconfiguration(uint64(l))
	}
	if m.URPostInsecurely {
		n += 3
	}
	if m.URInitialDelayS != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.URInitialDelayS))
	}
	if m.RestartOnWakeup {
		n += 3
	}
	if m.AutoUpgradeIntervalH != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.AutoUpgradeIntervalH))
	}
	if m.UpgradeToPreReleases {
		n += 3
	}
	if m.KeepTemporariesH != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.KeepTemporariesH))
	}
	if m.CacheIgnoredFiles {
		n += 3
	}
	if m.ProgressUpdateIntervalS != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.ProgressUpdateIntervalS))
	}
	if m.LimitBandwidthInLan {
		n += 3
	}
	l = m.MinHomeDiskFree.ProtoSize()
	n += 2 + l + sovOptionsconfiguration(uint64(l))
	l = len(m.ReleasesURL)
	if l > 0 {
		n += 2 + l + sovOptionsconfiguration(uint64(l))
	}
	if len(m.AlwaysLocalNets) > 0 {
		for _, s := range m.AlwaysLocalNets {
			l = len(s)
			n += 2 + l + sovOptionsconfiguration(uint64(l))
		}
	}
	if m.OverwriteRemoteDevNames {
		n += 3
	}
	if m.TempIndexMinBlocks != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.TempIndexMinBlocks))
	}
	if len(m.UnackedNotificationIDs) > 0 {
		for _, s := range m.UnackedNotificationIDs {
			l = len(s)
			n += 2 + l + sovOptionsconfiguration(uint64(l))
		}
	}
	if m.TrafficClass != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.TrafficClass))
	}
	l = len(m.DeprecatedDefaultFolderPath)
	if l > 0 {
		n += 2 + l + sovOptionsconfiguration(uint64(l))
	}
	if m.SetLowPriority {
		n += 3
	}
	if m.RawMaxFolderConcurrency != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.RawMaxFolderConcurrency))
	}
	l = len(m.CRURL)
	if l > 0 {
		n += 2 + l + sovOptionsconfiguration(uint64(l))
	}
	if m.CREnabled {
		n += 3
	}
	if m.StunKeepaliveStartS != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.StunKeepaliveStartS))
	}
	if m.StunKeepaliveMinS != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.StunKeepaliveMinS))
	}
	if len(m.RawStunServers) > 0 {
		for _, s := range m.RawStunServers {
			l = len(s)
			n += 2 + l + sovOptionsconfiguration(uint64(l))
		}
	}
	if m.DatabaseTuning != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.DatabaseTuning))
	}
	if m.RawMaxCIRequestKiB != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.RawMaxCIRequestKiB))
	}
	if m.AnnounceLANAddresses {
		n += 3
	}
	if m.SendFullIndexOnUpgrade {
		n += 3
	}
	if len(m.FeatureFlags) > 0 {
		for _, s := range m.FeatureFlags {
			l = len(s)
			n += 2 + l + sovOptionsconfiguration(uint64(l))
		}
	}
	if m.ConnectionLimitEnough != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.ConnectionLimitEnough))
	}
	if m.ConnectionLimitMax != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.ConnectionLimitMax))
	}
	if m.InsecureAllowOldTLSVersions {
		n += 3
	}
	if m.LocalConnectionPriority != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.LocalConnectionPriority))
	}
	if m.DeprecatedUPnPEnabled {
		n += 4
	}
	if m.DeprecatedUPnPLeaseM != 0 {
		n += 3 + sovOptionsconfiguration(uint64(m.DeprecatedUPnPLeaseM))
	}
	if m.DeprecatedUPnPRenewalM != 0 {
		n += 3 + sovOptionsconfiguration(uint64(m.DeprecatedUPnPRenewalM))
	}
	if m.DeprecatedUPnPTimeoutS != 0 {
		n += 3 + sovOptionsconfiguration(uint64(m.DeprecatedUPnPTimeoutS))
	}
	if len(m.DeprecatedRelayServers) > 0 {
		for _, s := range m.DeprecatedRelayServers {
			l = len(s)
			n += 3 + l + sovOptionsconfiguration(uint64(l))
		}
	}
	if m.DeprecatedMinHomeDiskFreePct != 0 {
		n += 11
	}
	if m.DeprecatedMaxConcurrentScans != 0 {
		n += 3 + sovOptionsconfiguration(uint64(m.DeprecatedMaxConcurrentScans))
	}
	return n
}

func sovOptionsconfiguration(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOptionsconfiguration(x uint64) (n int) {
	return sovOptionsconfiguration(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OptionsConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptionsconfiguration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OptionsConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OptionsConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawListenAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawListenAddresses = append(m.RawListenAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawGlobalAnnServers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawGlobalAnnServers = append(m.RawGlobalAnnServers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalAnnEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GlobalAnnEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalAnnEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LocalAnnEnabled = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalAnnPort", wireType)
			}
			m.LocalAnnPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalAnnPort |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalAnnMCAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalAnnMCAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSendKbps", wireType)
			}
			m.MaxSendKbps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSendKbps |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRecvKbps", wireType)
			}
			m.MaxRecvKbps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRecvKbps |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReconnectIntervalS", wireType)
			}
			m.ReconnectIntervalS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReconnectIntervalS |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelaysEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RelaysEnabled = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayReconnectIntervalM", wireType)
			}
			m.RelayReconnectIntervalM = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelayReconnectIntervalM |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBrowser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartBrowser = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NATEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NATEnabled = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NATLeaseM", wireType)
			}
			m.NATLeaseM = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NATLeaseM |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NATRenewalM", wireType)
			}
			m.NATRenewalM = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NATRenewalM |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NATTimeoutS", wireType)
			}
			m.NATTimeoutS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NATTimeoutS |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field URAccepted", wireType)
			}
			m.URAccepted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.URAccepted |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field URSeen", wireType)
			}
			m.URSeen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.URSeen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URUniqueID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URUniqueID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field URPostInsecurely", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.URPostInsecurely = bool(v != 0)
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field URInitialDelayS", wireType)
			}
			m.URInitialDelayS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.URInitialDelayS |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestartOnWakeup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RestartOnWakeup = bool(v != 0)
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoUpgradeIntervalH", wireType)
			}
			m.AutoUpgradeIntervalH = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoUpgradeIntervalH |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeToPreReleases", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpgradeToPreReleases = bool(v != 0)
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeepTemporariesH", wireType)
			}
			m.KeepTemporariesH = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeepTemporariesH |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheIgnoredFiles", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CacheIgnoredFiles = bool(v != 0)
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgressUpdateIntervalS", wireType)
			}
			m.ProgressUpdateIntervalS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProgressUpdateIntervalS |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitBandwidthInLan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LimitBandwidthInLan = bool(v != 0)
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinHomeDiskFree", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinHomeDiskFree.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleasesURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReleasesURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysLocalNets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlwaysLocalNets = append(m.AlwaysLocalNets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverwriteRemoteDevNames", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OverwriteRemoteDevNames = bool(v != 0)
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TempIndexMinBlocks", wireType)
			}
			m.TempIndexMinBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TempIndexMinBlocks |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnackedNotificationIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnackedNotificationIDs = append(m.UnackedNotificationIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrafficClass", wireType)
			}
			m.TrafficClass = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrafficClass |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedDefaultFolderPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeprecatedDefaultFolderPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetLowPriority", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SetLowPriority = bool(v != 0)
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawMaxFolderConcurrency", wireType)
			}
			m.RawMaxFolderConcurrency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RawMaxFolderConcurrency |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CRURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CRURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CREnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CREnabled = bool(v != 0)
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StunKeepaliveStartS", wireType)
			}
			m.StunKeepaliveStartS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StunKeepaliveStartS |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StunKeepaliveMinS", wireType)
			}
			m.StunKeepaliveMinS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StunKeepaliveMinS |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawStunServers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawStunServers = append(m.RawStunServers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseTuning", wireType)
			}
			m.DatabaseTuning = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DatabaseTuning |= Tuning(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawMaxCIRequestKiB", wireType)
			}
			m.RawMaxCIRequestKiB = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RawMaxCIRequestKiB |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 48:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnounceLANAddresses", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AnnounceLANAddresses = bool(v != 0)
		case 49:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendFullIndexOnUpgrade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendFullIndexOnUpgrade = bool(v != 0)
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureFlags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureFlags = append(m.FeatureFlags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionLimitEnough", wireType)
			}
			m.ConnectionLimitEnough = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionLimitEnough |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionLimitMax", wireType)
			}
			m.ConnectionLimitMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionLimitMax |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsecureAllowOldTLSVersions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InsecureAllowOldTLSVersions = bool(v != 0)
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalConnectionPriority", wireType)
			}
			m.LocalConnectionPriority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalConnectionPriority |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9000:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedUPnPEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeprecatedUPnPEnabled = bool(v != 0)
		case 9001:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedUPnPLeaseM", wireType)
			}
			m.DeprecatedUPnPLeaseM = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeprecatedUPnPLeaseM |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9002:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedUPnPRenewalM", wireType)
			}
			m.DeprecatedUPnPRenewalM = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeprecatedUPnPRenewalM |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9003:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedUPnPTimeoutS", wireType)
			}
			m.DeprecatedUPnPTimeoutS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeprecatedUPnPTimeoutS |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9004:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedRelayServers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeprecatedRelayServers = append(m.DeprecatedRelayServers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9005:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedMinHomeDiskFreePct", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DeprecatedMinHomeDiskFreePct = float64(math.Float64frombits(v))
		case 9006:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedMaxConcurrentScans", wireType)
			}
			m.DeprecatedMaxConcurrentScans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeprecatedMaxConcurrentScans |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOptionsconfiguration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOptionsconfiguration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOptionsconfiguration(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOptionsconfiguration
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOptionsconfiguration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOptionsconfiguration
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOptionsconfiguration
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOptionsconfiguration
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOptionsconfiguration        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOptionsconfiguration          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOptionsconfiguration = fmt.Errorf("proto: unexpected end of group")
)
